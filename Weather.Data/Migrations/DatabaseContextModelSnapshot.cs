// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weather.Data.EF;

namespace Weather.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Weather.Data.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3857787-ddec-4d24-baf7-eaa8bfe061ab"),
                            Name = "Kharkov"
                        },
                        new
                        {
                            Id = new Guid("c0b2002c-ab51-4297-ba65-804ec71d0768"),
                            Name = "Odessa"
                        },
                        new
                        {
                            Id = new Guid("0afc04ce-8836-4bbd-82bd-ac2ed9bcfac0"),
                            Name = "Kiev"
                        });
                });

            modelBuilder.Entity("Weather.Data.Entities.TemperatureLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("Temperature")
                        .HasColumnType("int");

                    b.Property<string>("WeatherConditionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WeatherConditionId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WeatherConditionId1");

                    b.ToTable("TemperatureLog");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c984764-ef08-4aab-a21a-004a1ace4beb"),
                            DateTime = new DateTime(2021, 7, 20, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Temperature = 12,
                            WeatherConditionId = "7af24cc9-7a5d-44ad-a803-ba3ce92cb9a2"
                        },
                        new
                        {
                            Id = new Guid("eb056eab-31b4-47cf-bde3-9ed450233b0d"),
                            DateTime = new DateTime(2021, 8, 19, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Temperature = 15,
                            WeatherConditionId = "7af24cc9-7a5d-44ad-a803-ba3ce92cb9a2"
                        },
                        new
                        {
                            Id = new Guid("de27e207-ca73-4b7c-ab1a-80279e9af514"),
                            DateTime = new DateTime(2021, 6, 10, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Temperature = 11,
                            WeatherConditionId = "35d57656-2c3d-4f32-9030-4681d45bd298"
                        },
                        new
                        {
                            Id = new Guid("b1a822a4-9180-4a1e-891e-33d9d8eae572"),
                            DateTime = new DateTime(2021, 9, 6, 18, 10, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Temperature = 14,
                            WeatherConditionId = "35d57656-2c3d-4f32-9030-4681d45bd298"
                        },
                        new
                        {
                            Id = new Guid("03c5ddf2-f492-40b9-96b5-4beefc7386ed"),
                            DateTime = new DateTime(2021, 5, 10, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Temperature = 17,
                            WeatherConditionId = "916a542e-36fe-4dde-ac1b-c8fe99729b40"
                        },
                        new
                        {
                            Id = new Guid("339d3a0e-e47c-4cc1-af67-d2836503dbfc"),
                            DateTime = new DateTime(2021, 4, 15, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Temperature = 10,
                            WeatherConditionId = "916a542e-36fe-4dde-ac1b-c8fe99729b40"
                        });
                });

            modelBuilder.Entity("Weather.Data.Entities.WeatherCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CityId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentTemperature")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId1");

                    b.ToTable("WeatherCondition");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7af24cc9-7a5d-44ad-a803-ba3ce92cb9a2"),
                            CityId = "c3857787-ddec-4d24-baf7-eaa8bfe061ab",
                            CurrentTemperature = 13
                        },
                        new
                        {
                            Id = new Guid("35d57656-2c3d-4f32-9030-4681d45bd298"),
                            CityId = "c0b2002c-ab51-4297-ba65-804ec71d0768",
                            CurrentTemperature = 12
                        },
                        new
                        {
                            Id = new Guid("916a542e-36fe-4dde-ac1b-c8fe99729b40"),
                            CityId = "0afc04ce-8836-4bbd-82bd-ac2ed9bcfac0",
                            CurrentTemperature = 14
                        });
                });

            modelBuilder.Entity("Weather.Data.Entities.TemperatureLog", b =>
                {
                    b.HasOne("Weather.Data.Entities.WeatherCondition", "WeatherCondition")
                        .WithMany()
                        .HasForeignKey("WeatherConditionId1");

                    b.Navigation("WeatherCondition");
                });

            modelBuilder.Entity("Weather.Data.Entities.WeatherCondition", b =>
                {
                    b.HasOne("Weather.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId1");

                    b.Navigation("City");
                });
#pragma warning restore 612, 618
        }
    }
}
